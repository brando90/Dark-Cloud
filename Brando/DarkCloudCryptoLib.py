import os, random, struct, sys
import filecmp
from Crypto.Cipher import AES

class DCKey:
    def __init__(self, password, keyFilename):
        #populates the object DCkey with its values
        #kf = open(key_filename)
        self.iv = None
        self.keyAES = None
        self.signKey = None
        self.valKey = None
        self.keyFilename = None

class DCCryptoClient:
    def __init__(self):
        #maps name of file to its key object
        self.htKeys = {}

    def addKeyObj(self, name, keyObj):
        #adds a key=name maping to value=keyObj to the dictionary
        pass

    def encryptPath(self, wd):
        #"recursively" retur an encrypted path
        pass

    def getKey(self, name):
        return self.htKeys[name]

    def encryptName(self, name, keyObj):
        #returns E[name, keyObj]
        pass

    def encryptKeyFileName(self, keyFileName, password):
        pass

    def encryptFile(self, fileContent, keyObj):
        pass

    def makeKeyFile(self, username, passwd):
        #makes a key file for username, password. 
        #Keys for file are generated by cryptolibrary
        pass




def encrypt_file(password, key_filename, file_name):
    iv = ''.join(chr(random.randint(0, 0xFF)) for i in range(16))
    encryptor = AES.new(key, AES.MODE_CBC, iv)
    filesize = os.path.getsize(file_name)

    with open(file_name, 'r') as f:
        file_data = f.read()
        delta = 0
        if len(file_data) % 16 != 0:
            delta = (16 - len(file_data)) % 16
            file_data += (' ' * delta)
        meta_data = str(filesize)+"\n"+str(iv)+"\n"+str(delta)
        return encryptor.encrypt(file_data)

def decrypt_file(key, file_name):
    with open(file_name, 'r') as f:
        origsize = struct.unpack('<Q', f.read(struct.calcsize('Q')))[0]
        iv = f.read(16)
        decryptor = AES.new(key, AES.MODE_CBC, iv)
        while True:
            file_data = f.read()
            outfile.write(decryptor.decrypt(chunk))

        outfile.truncate(origsize)


